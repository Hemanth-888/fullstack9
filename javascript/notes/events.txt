Events are activated by user's actions and they triggers the logics such as calling function

events can be declared in html or js. they are two ways
  i . eventHandlers: event handlers are triggered in html 
  ii. eventListeners: event eventListeners are triggered in js
  element.addEvenetListener('eventname',callback)

events by default passes an event object to the respective callback
This event object contains source element in target.
event.target = source element.

we have several types of events such as
i. mouse events
ii. keyboard events
iii. form events
iv. window events


i. mouse events: mouse events are triggered by mouse actions
  onclick: triggers action when an element is clicked
  ondblclick: triggers action when an element is double clicked
  onmouseover: triggers action when mouse is placed over an element
  onmouseout: triggers action when mouse is placed out of the element

ii. keyboard events: 
keyboard events are triggered by keyboard actions
  'keypress' : triggers action when a key is pressed

iii. window events: window events triggers action when user performs action based on window such as
  i.domContentLoaded: whenever dom loaded 
  ii.abort: whenever an element/document is closing
  iii. scroll: whenever user is scrolling
  
iv. formEvents: form events triggered by input actions
 i.input: triggered when user inputs a value
 ii.change: triggered when user changes a value(dropdown,radio,checkbox)
 iii.select: triggered when user selects an element
 iv.submit: triggered when user submits an element

event propagation: events propagated in a certain direction
 i. bubbling: this is the default event propogation. events propogate from inner to outer

 ii. capturing: to make it happen, we have to keep third argument of addEvenetListener to true. events propogate from outer to inner


 The design pattern in which we trigger parent instead of indivial child items is known as event delegation.


 











